
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module sqrt_top(
    //////// CLOCK ////////
    input           MAX10_CLK1_50,

    //////// SEG7 ////////
    output [6:0]    HEX0,
    output [6:0]    HEX1,
    output [6:0]    HEX2,

    //////// KEY ////////
    input  [1:0]    KEY,   // KEY[0] for start, KEY[1] for reset

    //////// LED ////////
    output [9:0]    LEDR
);

    // === 端口别名 ===
    wire clk     = MAX10_CLK1_50;
    wire st_btn  = KEY[0];
    wire rst_n   = KEY[1];  // 用 KEY[1] 控制复位

    // === RAM 地址控制 ===
    reg [3:0] addr;
    reg st_btn_prev;

    // === RAM 接口 ===
    wire [7:0] ram_out;
    wire mwr = 1'b0;         // RAM 为仅读
    wire [7:0] mdi = 8'd0;

    // === 缓存 RAM 输出，用于传给平方根计算单元 ===
    reg [7:0] N_reg;

    // === 输出信号 ===
    wire [3:0] Sqrt;
    wire Done;

    // === RAM 实例化 ===
    ram ram_inst (
        .clk(clk),
        .addr(addr),
        .mwr(mwr),
        .mdi(mdi),
        .mdo(ram_out)
    );

    // === 检测按键上升沿 ===
    wire st_btn_rising = st_btn & ~st_btn_prev;

    reg do_next;

    always @(posedge clk) begin
        st_btn_prev <= st_btn;

        if (!rst_n) begin
            addr     <= 0;
            do_next  <= 0;
        end else if (st_btn_rising && (addr != 15)) begin
            // if (st_btn_rising) begin
            //     N_reg   <= ram_out;
            //     do_next <= 1;
            // end else if (do_next && Done) begin
            //     addr    <= (addr == 15) ? 0 : addr + 1;
            //     do_next <= 0;
            // end
            addr <= addr + 1;
        end else begin
            addr <= addr; 
        end
    end

    // === 实例化平方根计算核心 ===
    square_root_unit core (
        .Clock(clk),
        .ResetN(rst_n),
        .St(st_btn_rising),
        .N(N_reg),
        .Sqrt(Sqrt),
        .Done(Done),
        .HEX0(HEX0),
        .HEX1(HEX1),
        .HEX2(HEX2)
    );
always @(posedge clk) begin
    N_reg <= ram_out;
end
    // === 显示 Done 状态 ===
    assign LEDR[0] = Done;
	 assign LEDR[4:1] = Sqrt;

endmodule
