
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module part2(

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// SW //////////
	input 		     [9:0]		SW
);


//output signal
wire [7:0] p;

// internal signal
wire p10, p11;
wire p20, p21, p22, p23;
wire p30, p31, p32, p33, p34, p35;
wire p40, p41, p42, p43, p44;
wire p50, p51, p52, p53;
wire p60, p61;

//carry out signals
wire c1, c2, c3, c4, c5, c6, c7, c8, c9;



//  Structural coding

//p0 logic
and q0(p[0], SW[4], SW[0]); 


//p1 logic
and q1(p10, SW[5], SW[0]);
and q2(p11, SW[4], SW[1]);

full_adder q3(.a(p10), .b(p11), .cin(0), .cout(p[1]), .s(c1) );


//p2 logic
and q4(p20, SW[6], SW[0]);
and q5(p21, SW[5], SW[1]);
full_adder a1(.a(p20), .b(p21), .cin(c1), .cout(c2), .s(p22) );

and q6(p23, SW[4], SW[2]);
full_adder a2(.a(p22), .b(p23), .cin(0), .cout(c4), .s(p[2]) );


//p3 logic
and q7(p30, SW[7], SW[0]);
and q8(p31, SW[6], SW[1]);
full_adder a3(.a(p30), .b(p31), .cin(c2), .cout(c3), .s(p32) );

and q9(p33, SW[5], SW[2]);
full_adder a4(.a(p32), .b(p33), .cin(c4), .cout(c5), .s(p34) );

and q10(p35, SW[4], SW[3]);
full_adder a5(.a(p34), .b(p35), .cin(0), .cout(c7), .s(p[3]) );

//p4 logic
and q11(p40, SW[7], SW[1]);
full_adder a6(.a(p40), .b(0), .cin(c3), .cout(p50), .s(p41) );

and q12(p42, SW[6], SW[2]);
full_adder a7(.a(p42), .b(p41), .cin(c5), .cout(c6), .s(p43) );

and q13(p44, SW[5], SW[3]);
full_adder a8(.a(p44), .b(p43), .cin(c7), .cout(c8), .s(p[4]) );


//p5 logic
and q14(p51, SW[7], SW[2]);
full_adder a9(.a(p51), .b(p50), .cin(c6), .cout(p60), .s(p52) );

and q15(p53, SW[6], SW[3]);
full_adder a10(.a(p53), .b(p52), .cin(c8), .cout(c9), .s(p[5]) );


//p6 & p7 logic
and q16(p61, SW[7], SW[3]);
full_adder a11(.a(p61), .b(p60), .cin(c9), .cout(p[7]), .s(p[6]) );



// Convert the p0-p7 into the hex value with the decoder module 

// HEX0 and HEX1 shows the result of A x B
hex_decoder hex0(.b3(p[3]), .b2(p[2]), .b1(p[1]), .b0(p[0]), .x(HEX0));
hex_decoder hex1(.b3(p[7]), .b2(p[6]), .b1(p[5]), .b0(p[4]), .x(HEX1));

// HEX2 represents value of B, HEX3 represents value of A.
hex_decoder hex2(.b3(SW[3]), .b2(SW[2]), .b1(SW[1]), .b0(SW[0]), .x(HEX2));
hex_decoder hex3(.b3(SW[7]), .b2(SW[6]), .b1(SW[5]), .b0(SW[4]), .x(HEX3));

// HEX4 and HEX5 light off
assign HEX4 = 8'b11111111;
assign HEX5 = 8'b11111111;

endmodule
